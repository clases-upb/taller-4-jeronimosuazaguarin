/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;



public class App {
    

    public static void main(String[] args) {
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main


    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */
    
           
public static String NUmImpar(int numero){
        try {
            
            final short numero100 = 100; 
            final short numero500 = 500;
            final short cantidad = 8;
         
 
            if(Numero < numero100 || numero > numero500){
                System.out.println("Numero no valido"); }
            else{
                int numero1 = 0;
        
            for(short NmMin = 1; NmMin < numero; NmMin+=2){
                System.out.print(NmMin +", " ); 
                 numero1++;

                if(numero1 == cantidad){
                    System.out.println("");
                    numero = 0;
                 }
                  
                
            }
        }
        }


    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */

     public static String numerofibonacci(int Num) {
        try {
            if (Num < 2) {
                System.out.print("Numero no valido");
                
            } else {
                int Cero = 0, Uno = 1, resultado = 0 ;
                 
               
            for (int i = 0; i < Num; i++) {    
                   
                    
                    
                    Cero = Uno;
                    Uno = resultado;
                    resultado = Cero + Uno; 
                    
                    System.out.print( + resultado+", ");
                }
            } 
            return "";


        } catch (Exception e) {
            return "Ocurrio un error \n";
        }
        
    }
            
    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */
public static String Raizcua(){

        try {
            
            final int mayor = 30, minimo = 20;
            final int mayorR = 355, minimoR = 2;
            int Aleatorio = minimo + (int) ((mayor - minimo + 1) * Math.random());
            String txt_return = "";

            for(int i = 0;i <= Aleatorio; i++){
                int AleatorioR = minimoR + (int) ((mayorR - minimoR + 1) * Math.random());
                int Raiz = (int) Math.sqrt(AleatorioR);

                txt_return+=("Numero: " +AleatorioR+ ", Raiz: "+Raiz +" (redondeada)\n");
            }
         
            
            return txt_return;
        } catch (Exception e) {
           return "Ocurrio un error \n"+ e;
        }
    }



    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */


    public static String generarNumerosAleatorios(int min, int max) {

    try {
        final int cantidadNumeros = 900;
        int numeroAleatorio;
        int divisor = 2, residuo = 0;
        int contadorPares = 0;
        String resultado = "";

        if (min >= max) {
            resultado += "Rango de Números Inválido";
        } else {
            for (int i = 0; i < cantidadNumeros; i++) {
                numeroAleatorio = min + (int) ((max - min + 1) * Math.random());

                if (numeroAleatorio % divisor == residuo) {
                    contadorPares++;
                }
            }
            resultado += " \nCantidad de números pares: " + contadorPares;
        }

        return resultado;

    } ccatch (Exception e) {
        return "Ocurrió un error";
    }
}




    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.

      */
    
public static String calcularSumaAleatoria(int limiteInferior, int limiteSuperior) {
    try {
        int numeroAleatorio1;
        int numeroAleatorio2;
        int sumaAleatoria = 0;
        String resultado = "";

        numeroAleatorio1 = limiteInferior + (int) ((limiteSuperior - limiteInferior + 1) * Math.random());

        if (limiteInferior >= limiteSuperior) {
            return "Rango de Números Inválido";
        }

        for (int i = 0; i <= numeroAleatorio1; i++) {
            numeroAleatorio2 = limiteInferior + (int) ((limiteSuperior - limiteInferior + 1) * Math.random());
            sumaAleatoria += numeroAleatorio2;
        }

        resultado += ("La suma de los aleatorios es de: " + sumaAleatoria);
        return resultado;

    } ccatch (Exception e) {
        return "Ocurrió un error \n";
    }
}


    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */
    public static String realizarSorteo() {
    try {
        String resultado = "";
        int totalSorteos = 20;

        for (int i = 1; i <= totalSorteos; i++) {
            int numeroGanador = (int) (Math.random() * 10000);
            int serie = (int) (Math.random() * (150 - 100 + 1)) + 100;

            if (i == 1) {
                resultado += "\n====== Premio Mayor ==========\n";
            } else if (i == 5) {
                resultado += "\n====== PREMIOS SECOS ========\n";
            } else if (i == totalSorteos) {
                resultado += "====== PREMIOS MENORES =======\n";
            }

            resultado += "Sorteo #" + i + " - Número Ganador: " + String.format("%04d", numeroGanador) + " - Serie: " + serie + "\n";
        

        return resultado;
    } catch (Exception e) {
        return "Ocurrió un error \n" + e;
    }
  }
}



